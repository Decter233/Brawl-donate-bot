import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
APP_URL = os.environ.get("APP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://mybot.onrender.com
if not BOT_TOKEN or not APP_URL:
    raise RuntimeError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –∏ APP_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"
PORT = int(os.environ.get("PORT", 8000))
HOST = "0.0.0.0"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü—Ä–∏–≤–µ—Ç", "–ü–æ–º–æ—â—å")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ aiogram.\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.", reply_markup=kb)

@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/help ‚Äî –ø–æ–º–æ—â—å")

@dp.message_handler(lambda m: m.text == "–ü—Ä–∏–≤–µ—Ç")
async def reply_hello(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")

@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(f"–≠—Ö–æ: {message.text}")

async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    logging.info("–£–¥–∞–ª—è–µ–º webhook...")
    await bot.delete_webhook()
    await bot.close()

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=HOST,
        port=PORT,
    )
